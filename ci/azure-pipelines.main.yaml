variables: 
  - template: variables/global.yaml@ci_templates
  - template: variables/go.yaml@ci_templates
  - template: variables/k8s.yaml@ci_templates
  - template: variables/git.yaml@ci_templates

resources:
  repositories:
    - repository: ci_templates
      type: github
      name: nalej/ci-templates
      endpoint: nalej
      ref: refs/heads/feature/NP-2419_Fix_Nodejs_Angular_versions


stages:
- stage: 'SlackStart'
  jobs:
  - job: 
    pool:
      vmImage: 'ubuntu-latest'    
    steps:
    - template: slack/build/start.yaml@ci_templates
      parameters:
        author: $(authorName)
        repository: $(Build.Repository.Name)
        branch: $(Build.SourceBranch)
        commit: $(Build.SourceVersionMessage)
        buildUrl: $(buildUrl)$(Build.BuildId)
        slackWebhook: $(slackBuilds)

- stage: 'AngularBuild'
  dependsOn: 'SlackStart'
  jobs:
  - job: 
    pool:
      vmImage: 'ubuntu-latest'  
    steps:
    - template: misc/nalej-component.yaml@ci_templates 
    - template: steps/angular-main.yaml@ci_templates   

- stage: 'ImageBuild'
  #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: 'AngularBuild'
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'  
    steps:  
    - template: misc/nalej-component.yaml@ci_templates 
    #- template: steps/docker-angular-main.yaml@ci_templates


    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: web-app
        downloadPath: $(system.defaultWorkingDirectory)/dist/
      displayName: Download dist to use in the docker image

    - script: |
        echo $(ls -a)
        build_output=$(docker build --no-cache -t mggarc59/web:v0.5.0 -f components/web/Dockerfile .)
        if [ $? -ne 0 ]; then
          echo "##vso[task.logissue type=error]There was an error creating the docker image nalej/web:edge.%0D%0ACommand output:%0D%0A${build_output//$'\n'/'%0D%0A'}%0D%0AError CIE0025"
          echo "##vso[task.complete result=Failed;]"
        fi
      displayName: Build the docker images

- stage: 'SlackFinish'
  condition: always()
  jobs:
  - job: 
    pool:
      vmImage: 'ubuntu-latest'  
    steps: 
    - template: steps/slack-finish-main.yaml@ci_templates
