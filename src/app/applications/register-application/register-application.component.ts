import { Component } from '@angular/core';
import { Backend } from '../../definitions/interfaces/backend';
import { NotificationsService } from '../../services/notifications.service';
import { MockupBackendService } from '../../services/mockup-backend.service';
import { BackendService } from '../../services/backend.service';
import { BsModalRef } from 'ngx-bootstrap';
import { LocalStorageKeys } from '../../definitions/const/local-storage-keys';
import { UploadFile, UploadEvent, FileSystemFileEntry } from 'ngx-file-drop';
import { TranslateService } from '@ngx-translate/core';

@Component({
  selector: 'app-register-application',
  templateUrl: './register-application.component.html',
  styleUrls: ['./register-application.component.scss']
})
export class RegisterApplicationComponent {
  /**
   * Backend reference
   */
  backend: Backend;
  /**
   * Models that hold organization id
   */
  organizationId: string;
  /**
   * Flag that holds it the file was correctly processed
   */
  readyToUpload: boolean;
  /**
   * File array that would contain the required file to register an application
   */
  public files: UploadFile[] = [];
  /**
   * File that holds the descriptor to register
   */
  jsonFile: any;
  /**
   * Placeholder for the file name/extension
   */
  fileName: string;

  constructor(
    public bsModalRef: BsModalRef,
    private backendService: BackendService,
    private mockupBackendService: MockupBackendService,
    private notificationsService: NotificationsService,
    private translateService: TranslateService
  ) {
    const mock = localStorage.getItem(LocalStorageKeys.registerAppMock) || null;
    // check which backend is required (fake or real)
    if (mock && mock === 'true') {
      this.backend = this.mockupBackendService;
    } else {
      this.backend =  this.backendService;
    }
    this.readyToUpload = false;
    this.fileName = this.translateService.instant('organization.loading');
  }

  /**
   * Register the app
   */
  registerApp() {
    this.backend.addAppDescriptor(this.organizationId, this.jsonFile)
      .subscribe(() => {
        this.notificationsService.add({
          message: this.translateService.instant('apps.registerMessage', {jsonFile: this.jsonFile.name}),
        });
        this.bsModalRef.hide();
      }, error => {
        this.notificationsService.add({
          message: error.error.message,
          type: 'warning'
        });
        this.bsModalRef.hide();
      });
  }
  /**
   * Checks if the form has been modified before discarding changes
   */
  discardChanges() {
    if (this.readyToUpload) {
      const confirmResult = confirm(this.translateService.instant('modals.discardChanges'));
      if (confirmResult) {
        this.bsModalRef.hide();
      }
    } else {
        this.bsModalRef.hide();
    }
  }
  /**
   * Handler for dropping files into drag and drop area
   * @param event Drop event generated by the browser
   */
  public onFileDrop(event: UploadEvent) {
    this.files = event.files;
    if (event.files.length > 1) {
      alert(this.translateService.instant('apps.registerUploadAlert'));
    } else {
      for (const droppedFile of event.files) {
        // Is it a file?
        if (droppedFile.fileEntry.isFile) {
          const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;
          fileEntry.file((file: File) => {
            const fileReader = new FileReader();
            fileReader.onload = (e) => {
              try {
                this.jsonFile = JSON.parse(fileReader.result as string);
                if (this.jsonFile.name) {
                  this.readyToUpload = true;
                } else {
                  alert(this.translateService.instant('apps.registerMissingAlert'));
                }
              } catch (e) {
                alert( this.translateService.instant('apps.registerFileError', {event: e}));
              }
            };
            this.fileName = file.name;
            fileReader.readAsText(file);
          });
        } else {
          // Only files allowed
          alert(this.translateService.instant('apps.registerUnavailable'));
        }
      }
    }
  }
  /**
   * Handler for changes on file selector
   * @param e Event generated by the browser
   */
  fileSelectorChange(e) {
    const fileReader = new FileReader();
    fileReader.onload = () => {
      try {
        this.jsonFile = JSON.parse(fileReader.result as string);
        this.readyToUpload = true;
      } catch (event) {
        alert( this.translateService.instant('apps.registerFileError', {event: event}));
        e.path[0].value = '';
      }
    };
    this.fileName = e.target.files[0].name;
    fileReader.readAsText(e.target.files[0]);
  }
}
